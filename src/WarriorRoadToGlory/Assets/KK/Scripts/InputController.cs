//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/KK/Scripts/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Right Hand"",
            ""id"": ""1a91ce0a-6865-4bbe-948f-d4799a1c1b73"",
            ""actions"": [
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""4d011eb0-9f2a-41cb-ad86-c0ff83df59ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fist"",
                    ""type"": ""Button"",
                    ""id"": ""c9d30395-5aa6-417c-872c-e3dfe4797217"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointing"",
                    ""type"": ""Button"",
                    ""id"": ""9b592af3-f8f6-42d2-973b-09abc00f09f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""75fec1f1-d413-4555-8b86-915330899ec1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9742848b-1911-4674-8d1d-0bd01a9f1208"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""830f0b2a-ed87-4483-88b7-df80ab5c27d3"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5dec75d-75d4-4b9d-9db2-bfc30dcb97c1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6033e0a9-65c3-4ac3-8cff-f495709a714c"",
                    ""path"": ""<XRController>{RightHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Left Hand"",
            ""id"": ""d3be2115-e4b7-46ed-acfd-aeaa6f080aed"",
            ""actions"": [
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""9c45d759-2722-4ae5-8fb1-712e932db0ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fist"",
                    ""type"": ""Button"",
                    ""id"": ""7503df5f-3153-4e75-ae79-c6bc12448d91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointing"",
                    ""type"": ""Button"",
                    ""id"": ""8a7a8149-fa35-4174-b8ce-a9da4a0ac0b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bf4f08e-06fb-4e75-9e6b-814b05775af0"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a57ddda0-598f-4771-8d8d-5beb5e9ef46c"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""457cd43e-9cf0-4206-8fc0-da2dd142996d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Right Hand
        m_RightHand = asset.FindActionMap("Right Hand", throwIfNotFound: true);
        m_RightHand_Grip = m_RightHand.FindAction("Grip", throwIfNotFound: true);
        m_RightHand_Fist = m_RightHand.FindAction("Fist", throwIfNotFound: true);
        m_RightHand_Pointing = m_RightHand.FindAction("Pointing", throwIfNotFound: true);
        m_RightHand_Move = m_RightHand.FindAction("Move", throwIfNotFound: true);
        // Left Hand
        m_LeftHand = asset.FindActionMap("Left Hand", throwIfNotFound: true);
        m_LeftHand_Grip = m_LeftHand.FindAction("Grip", throwIfNotFound: true);
        m_LeftHand_Fist = m_LeftHand.FindAction("Fist", throwIfNotFound: true);
        m_LeftHand_Pointing = m_LeftHand.FindAction("Pointing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Right Hand
    private readonly InputActionMap m_RightHand;
    private List<IRightHandActions> m_RightHandActionsCallbackInterfaces = new List<IRightHandActions>();
    private readonly InputAction m_RightHand_Grip;
    private readonly InputAction m_RightHand_Fist;
    private readonly InputAction m_RightHand_Pointing;
    private readonly InputAction m_RightHand_Move;
    public struct RightHandActions
    {
        private @InputController m_Wrapper;
        public RightHandActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grip => m_Wrapper.m_RightHand_Grip;
        public InputAction @Fist => m_Wrapper.m_RightHand_Fist;
        public InputAction @Pointing => m_Wrapper.m_RightHand_Pointing;
        public InputAction @Move => m_Wrapper.m_RightHand_Move;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Add(instance);
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @Fist.started += instance.OnFist;
            @Fist.performed += instance.OnFist;
            @Fist.canceled += instance.OnFist;
            @Pointing.started += instance.OnPointing;
            @Pointing.performed += instance.OnPointing;
            @Pointing.canceled += instance.OnPointing;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IRightHandActions instance)
        {
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @Fist.started -= instance.OnFist;
            @Fist.performed -= instance.OnFist;
            @Fist.canceled -= instance.OnFist;
            @Pointing.started -= instance.OnPointing;
            @Pointing.performed -= instance.OnPointing;
            @Pointing.canceled -= instance.OnPointing;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // Left Hand
    private readonly InputActionMap m_LeftHand;
    private List<ILeftHandActions> m_LeftHandActionsCallbackInterfaces = new List<ILeftHandActions>();
    private readonly InputAction m_LeftHand_Grip;
    private readonly InputAction m_LeftHand_Fist;
    private readonly InputAction m_LeftHand_Pointing;
    public struct LeftHandActions
    {
        private @InputController m_Wrapper;
        public LeftHandActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grip => m_Wrapper.m_LeftHand_Grip;
        public InputAction @Fist => m_Wrapper.m_LeftHand_Fist;
        public InputAction @Pointing => m_Wrapper.m_LeftHand_Pointing;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Add(instance);
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @Fist.started += instance.OnFist;
            @Fist.performed += instance.OnFist;
            @Fist.canceled += instance.OnFist;
            @Pointing.started += instance.OnPointing;
            @Pointing.performed += instance.OnPointing;
            @Pointing.canceled += instance.OnPointing;
        }

        private void UnregisterCallbacks(ILeftHandActions instance)
        {
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @Fist.started -= instance.OnFist;
            @Fist.performed -= instance.OnFist;
            @Fist.canceled -= instance.OnFist;
            @Pointing.started -= instance.OnPointing;
            @Pointing.performed -= instance.OnPointing;
            @Pointing.canceled -= instance.OnPointing;
        }

        public void RemoveCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);
    public interface IRightHandActions
    {
        void OnGrip(InputAction.CallbackContext context);
        void OnFist(InputAction.CallbackContext context);
        void OnPointing(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnGrip(InputAction.CallbackContext context);
        void OnFist(InputAction.CallbackContext context);
        void OnPointing(InputAction.CallbackContext context);
    }
}
